import datetime
import re
import sqlite3
import os
from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import StatesGroup, State
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from openpyxl import Workbook
import random
from system.dispatcher import dp, bot
from openpyxl import Workbook
from openpyxl.styles import PatternFill

class RecordingQuestions(StatesGroup):
    """–†–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –¥–æ—Å—Ç–∞–≤–∫–∏"""
    application_date = State()  # –î–∞—Ç–∞
    guest_number = State()  # –ù–æ–º–µ—Ä –≥–æ—Å—Ç—è
    name_of_the_guest = State()  # –ò–º—è –≥–æ—Å—Ç—è
    application_time = State()  # –í—Ä–µ–º—è
    commentary = State()  # –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏


@dp.callback_query_handler(lambda c: c.data == 'apply')
async def application_record_handler(callback_query: types.CallbackQuery):
    """–í–≤–æ–¥ –¥–∞—Ç—ã –¥–ª—è –æ—Ç—á–µ—Ç–∞ –∫–Ω–æ–ø–∫–∏ (–ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É)"""
    await bot.send_message(callback_query.from_user.id,
                           "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É üìÜ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–µ–Ω—å.–ú–µ—Å—è—Ü (–Ω–∞–ø—Ä–∏–º–µ—Ä, 25.07):")
    await RecordingQuestions.application_date.set()


@dp.message_handler(state=RecordingQuestions.application_date)
async def process_guest_number(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤–≤–æ–¥–∞ –Ω–æ–º–µ—Ä–∞ –≥–æ—Å—Ç—è"""
    date_pattern = r"\d{2}\.\d{2}"  # –†–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ (dd.mm)
    if not re.match(date_pattern, message.text):
        await bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É üìÜ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–µ–Ω—å.–ú–µ—Å—è—Ü (–Ω–∞–ø—Ä–∏–º–µ—Ä, 25.07):")
        return
    # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –≤–≤–æ–¥–∞ –≤ –æ–±—ä–µ–∫—Ç datetime
    try:
        # –î–æ–±–∞–≤—å—Ç–µ —Ç–µ–∫—É—â–∏–π –≥–æ–¥ –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–º—É –≤–≤–æ–¥—É, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –ø–æ–ª–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã.
        current_year = datetime.date.today().year
        full_date_str = message.text + "." + str(current_year)
        application_date = datetime.datetime.strptime(full_date_str, "%d.%m.%Y").date()
    except ValueError:
        await bot.send_message(message.chat.id,
                               "–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –¥–∞—Ç—É üìÜ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–µ–Ω—å.–ú–µ—Å—è—Ü (–Ω–∞–ø—Ä–∏–º–µ—Ä, 25.07):")
        return
    # –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É
    current_date = datetime.date.today()
    if application_date < current_date:
        current_date_formatted = current_date.strftime("%d.%m")
        await bot.send_message(message.chat.id,
                               f"–ù–µ–ª—å–∑—è –≤—ã–±—Ä–∞—Ç—å –¥–∞—Ç—É, –∫–æ—Ç–æ—Ä–∞—è —É–∂–µ –ø—Ä–æ—à–ª–∞ —Ç–µ–∫—É—â–∞—è –¥–∞—Ç–∞: {current_date_formatted}.\n\n –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –¥–∞—Ç—É üìÜ:")
        return

    await state.update_data(application_date=message.text)
    await bot.send_message(message.chat.id, "üë• –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≥–æ—Å—Ç—è:")
    await RecordingQuestions.guest_number.set()


@dp.message_handler(state=RecordingQuestions.guest_number)
async def process_guest_name(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤–≤–æ–¥–∞ –§.–ò.–û. –≥–æ—Å—Ç—è"""
    await state.update_data(guest_number=message.text)
    await bot.send_message(message.chat.id, "üë§ –í–≤–µ–¥–∏—Ç–µ –§.–ò.–û. –≥–æ—Å—Ç—è:")
    await RecordingQuestions.name_of_the_guest.set()


@dp.message_handler(state=RecordingQuestions.name_of_the_guest)
async def process_application_time(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤–≤–æ–¥–∞ –≤—Ä–µ–º–µ–Ω–∏"""
    await state.update_data(name_of_the_guest=message.text)
    await bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è ‚è≥:")
    await RecordingQuestions.application_time.set()


@dp.message_handler(state=RecordingQuestions.application_time)
async def process_application_time(message: types.Message, state: FSMContext):
    # –ü—Ä–æ—Å—Ç–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—Å—Ç –≤—Ä–µ–º–µ–Ω–∏ –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ, –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
    application_time = message.text
    await state.update_data(application_time=application_time)
    await bot.send_message(message.chat.id, "üí¨ –í–≤–µ–¥–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:")
    await RecordingQuestions.commentary.set()


@dp.message_handler(state=RecordingQuestions.commentary)
async def process_price(message: types.Message, state: FSMContext):
    """–ö–æ–Ω–µ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—Ç—á–µ—Ç–∞"""
    try:
        commentary = message.text  # –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π, –≤–≤–µ–¥–µ–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
        data = await state.get_data()  # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
        application_date = data.get('application_date')
        guest_number = data.get('guest_number')
        name_of_the_guest = data.get('name_of_the_guest')
        application_time = data.get('application_time')

        id_number = random.randint(100, 99999)  # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–º–µ—Ä –∑–∞—è–≤–∫–∏ —Å–ª—É—á–∞–π–Ω—ã–º –æ–±—Ä–∞–∑–æ–º
        print(f"–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞ –∑–∞—è–≤–∫–∞ —Å –Ω–æ–º–µ—Ä–æ–º {id_number}")

        data['commentary'] = commentary  # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ ¬´–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è¬ª –≤ —Å–ª–æ–≤–∞—Ä—å –¥–∞–Ω–Ω—ã—Ö
        data['id_number'] = id_number  # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ ID –≤ —Å–ª–æ–≤–∞—Ä—å –¥–∞–Ω–Ω—ã—Ö
        await state.update_data(data)  # –û–±–Ω–æ–≤–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ

        message_text = (f"<b>–î–∞–Ω–Ω—ã–µ:</b>\n\n"
                        f"<b>üìÇ ID:</b> <i>{id_number}</i>\n"
                        f"<b>üìÜ –î–∞—Ç–∞:</b> <i>{application_date}</i>\n"
                        f"<b>üë• –ù–æ–º–µ—Ä –≥–æ—Å—Ç—è:</b> <i>{guest_number}</i>\n"
                        f"<b>üë§ –§.–ò.–û. –≥–æ—Å—Ç—è:</b> <i>{name_of_the_guest}</i>\n"
                        f"<b>‚è≥ –í—Ä–µ–º—è:</b> <i>{application_time}</i>\n"
                        f"<b>üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:</b> <i>{commentary}</i>\n"
                        "\n<b>–î–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –Ω–∞—á–∞–ª–æ –Ω–∞–∂–º–∏—Ç–µ</b> /start")
        # –°–æ–∑–¥–∞—Ç—å –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ "–û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞—è–≤–∫—É" –∏ "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞—è–≤–∫—É"
        markup = InlineKeyboardMarkup(row_width=2)
        markup.add(InlineKeyboardButton("–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É", callback_data="send_application"),
                   InlineKeyboardButton("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞—è–≤–∫—É", callback_data="edit_application"))
        await bot.send_message(message.chat.id, message_text, parse_mode='HTML', reply_markup=markup)
    except Exception as e:
        await bot.send_message(message.chat.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö.")
        print(e)


@dp.callback_query_handler(lambda c: c.data == 'send_application', state=RecordingQuestions.commentary)
async def send_application_handler(callback_query: types.CallbackQuery, state: FSMContext):
    try:
        data = await state.get_data()  # –ü–æ–ª—É—á–∏—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        application_date = data.get('application_date')
        guest_number = data.get('guest_number')
        name_of_the_guest = data.get('name_of_the_guest')
        application_time = data.get('application_time')
        commentary = data.get('commentary')
        number = ""
        id_number = data.get('id_number')
        record_check = ""

        # –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–≤–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ SQLite –∏ –¥–∞–Ω–Ω—ã–µ INSERT –≤ —Ç–∞–±–ª–∏—Ü—É
        # –ó–∞–º–µ–Ω–∏—Ç–µ 'database/database.db' –∏–º–µ–Ω–µ–º –≤–∞—à–µ–≥–æ —Ñ–∞–π–ª–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö SQLite.
        conn = sqlite3.connect('database/database.db')
        cursor = conn.cursor()
        # –ó–∞–º–µ–Ω–∏—Ç–µ reports –Ω–∞ –∏–º—è –≤–∞—à–µ–π —Ç–∞–±–ª–∏—Ü—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.
        cursor.execute('''CREATE TABLE IF NOT EXISTS reports
                          (id_number, application_date, guest_number, number,  name_of_the_guest,
                           application_time, commentary, record_check)''')
        # –í—Å—Ç–∞–≤—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ç–∞–±–ª–∏—Ü—É
        cursor.execute("INSERT INTO reports VALUES (?, ?, ?, ?, ?, ?, ?, ?)",
                       (id_number, application_date, guest_number, number, name_of_the_guest, application_time,
                        commentary, record_check))
        conn.commit()
        conn.close()
        mes_text = ("<b>–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –±—ã–ª–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞! üöÄ</b>"
                    "\n\n–î–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –Ω–∞—á–∞–ª–æ –Ω–∞–∂–º–∏—Ç–µ /start")
        await bot.send_message(callback_query.from_user.id, mes_text)
        await state.finish()
    except Exception as e:
        await bot.send_message(callback_query.from_user.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞—è–≤–∫–∏.")
        print(e)


@dp.callback_query_handler(lambda c: c.data == 'edit_application', state='*')
async def edit_application_handler(callback_query: types.CallbackQuery, state: FSMContext):
    await state.finish()  # –°–±—Ä–æ—Å–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Å–Ω–∞—á–∞–ª–∞
    await application_record_handler(callback_query)  # –ù–∞—á–Ω–∏—Ç–µ –∑–∞–ø–∏—Å—ã–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã —Å —Å–∞–º–æ–≥–æ –Ω–∞—á–∞–ª–∞


@dp.callback_query_handler(lambda c: c.data == 'report_for_today')
async def send_report_for_today(callback_query: types.CallbackQuery):
    try:
        # –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–≤–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ SQLite –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π.
        # –ó–∞–º–µ–Ω–∏—Ç–µ 'database/database.db' –∏–º–µ–Ω–µ–º –≤–∞—à–µ–≥–æ —Ñ–∞–π–ª–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö SQLite.
        conn = sqlite3.connect('database/database.db')
        cursor = conn.cursor()
        # –ü–æ–ª—É—á–∏—Ç—å –¥–µ–Ω—å –∏ –º–µ—Å—è—Ü —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–π –¥–∞—Ç—ã
        today_day_month = datetime.date.today().strftime("%d.%m")
        # –ó–∞–º–µ–Ω–∏—Ç–µ reports –Ω–∞ –∏–º—è –≤–∞—à–µ–π —Ç–∞–±–ª–∏—Ü—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.
        cursor.execute("SELECT * FROM reports WHERE application_date LIKE ?", (f"%{today_day_month}%",))
        rows = cursor.fetchall()
        if not rows:
            await bot.send_message(callback_query.from_user.id, "–ù–∞ —Å–µ–≥–æ–¥–Ω—è –Ω–µ—Ç –∑–∞—è–≤–æ–∫.")
        else:
            workbook = Workbook()  # –°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–∏–≥–∏ –∏ –ª–∏—Å—Ç–∞ Excel
            sheet = workbook.active
            # –ù–∞–ø–∏—à–∏—Ç–µ —Å—Ç—Ä–æ–∫—É –∑–∞–≥–æ–ª–æ–≤–∫–∞
            header = ['ID –∑–∞—è–≤–∫–∏', '–î–∞—Ç–∞', '–ù–æ–º–µ—Ä –≥–æ—Å—Ç—è', '–ù–æ–º–µ—Ä —Å—Ç–æ–ª–∞', '–§.–ò.–û. –≥–æ—Å—Ç—è', '–í—Ä–µ–º—è', '–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π']
            sheet.append(header)

            # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç PatternFill –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–≤–µ—Ç–∞
            bad_record_fill = PatternFill(start_color="FFCCCB", end_color="FFCCCB", fill_type="solid")

            for row in rows:
                if row[7] == 'bad':
                    row_data = list(row)[:7]  # –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 7 —ç–ª–µ–º–µ–Ω—Ç–æ–≤
                    sheet.append(row_data)
                    for cell in sheet.iter_rows(min_row=sheet.max_row, max_row=sheet.max_row, min_col=1, max_col=7):
                        for col_idx in range(1, len(cell) + 1):
                            cell[col_idx - 1].fill = bad_record_fill
                else:
                    sheet.append(row[:7])
            # –°–æ—Ö—Ä–∞–Ω–∏—Ç–µ —Ñ–∞–π–ª Excel
            file_name = f"–æ—Ç—á–µ—Ç_–ó–ê_–°–ï–ì–û–î–ù–Ø_{datetime.date.today().strftime('%Y-%m')}.xlsx"
            workbook.save(file_name)
            # –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∞–π–ª Excel –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            with open(file_name, 'rb') as file:
                await bot.send_document(callback_query.from_user.id, file)
            os.remove(file_name)  # –£–¥–∞–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
        conn.close()
    except Exception as e:
        await bot.send_message(callback_query.from_user.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ç—á–µ—Ç–∞ –∑–∞ —Å–µ–≥–æ–¥–Ω—è.")
        print(e)


@dp.callback_query_handler(lambda c: c.data == 'report_for_tomorrow')
async def send_report_for_tomorrow(callback_query: types.CallbackQuery):
    try:
        # –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–≤–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ SQLite –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π –∑–∞–≤—Ç—Ä–∞—à–Ω–µ–≥–æ –¥–Ω—è.
        # –ó–∞–º–µ–Ω–∏—Ç–µ 'database/database.db' –∏–º–µ–Ω–µ–º –≤–∞—à–µ–≥–æ —Ñ–∞–π–ª–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö SQLite.
        conn = sqlite3.connect('database/database.db')
        cursor = conn.cursor()
        # –ü–æ–ª—É—á–∏—Ç—å –¥–µ–Ω—å –∏ –º–µ—Å—è—Ü –∑–∞–≤—Ç—Ä–∞—à–Ω–µ–π –¥–∞—Ç—ã
        tomorrow_day_month = (datetime.date.today() + datetime.timedelta(days=1)).strftime("%d.%m")
        # –ó–∞–º–µ–Ω–∏—Ç–µ reports –Ω–∞ –∏–º—è –≤–∞—à–µ–π —Ç–∞–±–ª–∏—Ü—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.
        cursor.execute("SELECT * FROM reports WHERE application_date LIKE ?", (f"%{tomorrow_day_month}%",))
        rows = cursor.fetchall()
        if not rows:
            await bot.send_message(callback_query.from_user.id, "–ù–∞ –∑–∞–≤—Ç—Ä–∞ –Ω–µ—Ç –∑–∞—è–≤–æ–∫.")
        else:
            workbook = Workbook()  # –°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–∏–≥–∏ –∏ –ª–∏—Å—Ç–∞ Excel
            sheet = workbook.active
            # –ù–∞–ø–∏—à–∏—Ç–µ —Å—Ç—Ä–æ–∫—É –∑–∞–≥–æ–ª–æ–≤–∫–∞
            header = ['ID –∑–∞—è–≤–∫–∏', '–î–∞—Ç–∞', '–ù–æ–º–µ—Ä –≥–æ—Å—Ç—è', '–ù–æ–º–µ—Ä —Å—Ç–æ–ª–∞', '–§.–ò.–û. –≥–æ—Å—Ç—è', '–í—Ä–µ–º—è', '–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π']
            sheet.append(header)

            # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç PatternFill –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–≤–µ—Ç–∞
            bad_record_fill = PatternFill(start_color="FFCCCB", end_color="FFCCCB", fill_type="solid")

            for row in rows:
                if row[7] == 'bad':
                    row_data = list(row)[:7]  # –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 7 —ç–ª–µ–º–µ–Ω—Ç–æ–≤
                    sheet.append(row_data)
                    for cell in sheet.iter_rows(min_row=sheet.max_row, max_row=sheet.max_row, min_col=1, max_col=7):
                        for col_idx in range(1, len(cell) + 1):
                            cell[col_idx - 1].fill = bad_record_fill
                else:
                    sheet.append(row[:7])

            # –°–æ—Ö—Ä–∞–Ω–∏—Ç–µ —Ñ–∞–π–ª Excel
            file_name = f"–æ—Ç—á–µ—Ç_–ù–ê_–ó–ê–í–¢–†–ê_{(datetime.date.today() + datetime.timedelta(days=1)).strftime('%Y-%m')}.xlsx"
            workbook.save(file_name)
            # –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∞–π–ª Excel –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            with open(file_name, 'rb') as file:
                await bot.send_document(callback_query.from_user.id, file)
            os.remove(file_name)  # –£–¥–∞–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
        conn.close()
    except Exception as e:
        await bot.send_message(callback_query.from_user.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ç—á–µ—Ç–∞ –Ω–∞ –∑–∞–≤—Ç—Ä–∞.")
        print(e)


def apply_handler():
    """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è (–ó–∞—è–≤–∫–∏)"""
    dp.register_callback_query_handler(application_record_handler, text='apply')
    dp.register_callback_query_handler(send_application_handler, text='send_application')
    dp.register_callback_query_handler(edit_application_handler, text='edit_application')
    dp.register_callback_query_handler(send_report_for_today, text='report_for_today')
    dp.register_callback_query_handler(send_report_for_tomorrow, text='report_for_tomorrow')
